#!/usr/bin/env php

<?php 

// Fractional part is represented by lower case numbers to indicate less than 0
// 
//roman 2394 
//roman 3282 
//roman 3423.718
//
//results:
//MMCCCXCIV
//MMMCCLXXXII
//MMMCDXXIII.dccxviii

if (!isset($argv[1])) {
    echo <<<EOF
Usage:  roman <integer>
    roman 42
    roman 450 "10,Y 100,T  50,O"

EOF;
    exit(1);
}

if (isset($argv[2])) {
    $result = integerToRoman($argv[1], $argv[2]);
} else {
    $result = integerToRoman($argv[1]);
}

echo $result, "\n\n";

function integerToRoman($integer, $customMap = null)
{
    if ($integer > 3999 || $integer < 1) {
        exit("Sorry but I can only translate numbers less than 3999\n\n");
    }
    $roman = '';
    $parts = array();
    $map = array(
        1000 => 'M',
        900 =>  'CM',
        500  => 'D',
        400  => 'CD',
        100  => 'C',
        90   => 'XC',
        50   => 'L',
        40   => 'XL',
        10   => 'X',
        9    => 'IX',
        5    => 'V',
        4    => 'IV',
        1    => 'I'
        );

    
    $mapping = explode(' ', $customMap);
    $customMap = array();
    foreach ($mapping as $value) {
        $item = explode(',', $value);
        if (!empty($item[0]) && !empty($item[1])) {
            $customMap[$item[0]] = $item[1];
        }
    }

    if (!is_null($customMap)) {
        if (2 == count(array_intersect(array(1,5), array_keys($customMap)))) {
            exit("Sorry but you can't customize 1 or 5\n\n");
        }

        $diff = array_diff_key($customMap, $map);
        if (0 < count($diff)) {
            exit(sprintf("Sorry but you are only allowed to add mappings for %s.\n\n", implode(', ', $diff)));
        }
        $map = $customMap + $map;
        krsort($map);
    }
    $parts = explode('.', $integer);
    $size = sizeof($parts);
    for ($i = 0; $i < $size; $i++) {
        $roman = '';
        while ($parts[$i] > 0) {
            foreach ($map as $mapInt => $mapRoman) {
                if ($parts[$i] >= $mapInt) {
                    $parts[$i] -= $mapInt;
                    $roman .= $mapRoman;
                    break;
                }
            }
        }
        $parts[$i] = $roman;
    }
    if (isset($parts[1])) {
        $parts[1] = strtolower($parts[1]);
    }

    return implode('.', $parts);
}
